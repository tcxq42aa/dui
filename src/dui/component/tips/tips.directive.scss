$tip_default_bg_color: #3e3e3e;
$tip_default_text_color: #fff;

$tip_type: top topLeft topRight right rightTop rightBottom bottom bottomLeft bottomRight left leftTop leftBottom;
$tip_type_map: (
        top: top translate3d(-50%, 100%, 0),
        topLeft: top translate3d(-50%, 100%, 0),
        topRight: top translate3d(50%, 100%, 0),
        right: right translate3d(-100%, -50%, 0),
        rightTop: right translate3d(-100%, -50%, 0),
        rightBottom: right translate3d(-100%, 50%, 0),
        bottom: bottom translate3d(-50%, -100%, 0),
        bottomLeft: bottom translate3d(-50%, -100%, 0),
        bottomRight: bottom translate3d(50%, -100%, 0),
        left: left translate3d(100%, -50%, 0),
        leftTop: left translate3d(100%, -50%, 0),
        leftBottom: left translate3d(100%, 50%, 0)
);

@mixin apply_theme($name, $background, $color){
  &.#{$name} {
    color: $color;
    border: 1px solid #c0c0c0;
    background-color: $background;
    width: 23.3rem;
    height: 10.9rem;
    padding: 1.3rem 1.7rem;
    display: flex;
    flex-direction: column;
    @each $type in $tip_type {
      $param: map_get($tip_type_map, $type);
      &.#{$type} > .arrow {
        z-index: 1000;
        display: block;
        content: ' ';
        position: absolute;
        border: 7px solid transparent;
        border-#{nth($param, 1)}-color: #c0c0c0;
        border-#{nth($param, 1)}-width: 5px;
      }
      &.#{$type} > .arrow:after {
        z-index: 1000;
        display: block;
        content: ' ';
        position: absolute;
        border: 7px solid transparent;
        border-#{nth($param, 1)}-color: #fff;
        border-#{nth($param, 1)}-width: 5px;
        @if(nth($param, 1) == 'top') {
          left: -7px;
          top: -6px;
        }@else if(nth($param, 1) == 'bottom') {
          left: -7px;
          top: -6px;
        }@else if(nth($param, 1) == 'left') {
          left: -6px;
          top: -7px;
        }@else if(nth($param, 1) == 'right') {
          left: -6px;
          top: -7px;
        }

      }
    }
    & .tip-title {
      line-height: 1;
      margin: 0 0 1.3rem;
      font-size: 1.2rem;
      font-weight: bold;
    }
    & .tip-content {
      flex-grow: 1;
    }
    & .tip-action {
      display: flex;
      flex-flow: row-reverse;
      a {
        margin-left: 1rem;
      }
    }
  }
}

.tips {
  z-index: 999;
  position: absolute;
  color: $tip_default_text_color;
  border-color: $tip_default_bg_color;
  background: $tip_default_bg_color;
  border-radius: 2px;
  padding: .5rem 2.5rem;
  max-width: 300px;
  line-height: 1;
  box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, .2);

  & > .arrow {
    z-index: 999;
    display: block;
    position: absolute;
    border: 7px solid transparent;
  }

  @each $type in $tip_type {
    &.#{$type} > .arrow {
      $param: map_get($tip_type_map, $type);
      border-#{nth($param, 1)}-color: inherit;
      border-#{nth($param, 1)}-width: 5px;
      transform: nth($param, 2);
    }
  }

  @include apply_theme(dialog, #fff, #414141);
}